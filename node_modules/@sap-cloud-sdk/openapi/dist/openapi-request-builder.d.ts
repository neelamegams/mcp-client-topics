import type { Method, HttpResponse, HttpRequestConfigWithOrigin, CustomRequestConfig } from '@sap-cloud-sdk/http-client';
import type { HttpMiddleware } from '@sap-cloud-sdk/http-client/internal';
import type { HttpDestinationOrFetchOptions } from '@sap-cloud-sdk/connectivity';
/**
 * Request builder for OpenAPI requests.
 * @typeParam ResponseT - Type of the response for the request.
 */
export declare class OpenApiRequestBuilder<ResponseT = any> {
    method: Method;
    private pathPattern;
    private parameters?;
    private basePath?;
    private _fetchCsrfToken;
    private customHeaders;
    private customRequestConfiguration;
    private _middlewares;
    /**
     * Create an instance of `OpenApiRequestBuilder`.
     * @param method - HTTP method of the request to be built.
     * @param pathPattern - Path for the request containing path parameter references as in the OpenAPI specification.
     * @param parameters - Query parameters and or body to pass to the request.
     * @param basePath - The custom path to be prefixed to the API path pattern.
     */
    constructor(method: Method, pathPattern: string, parameters?: OpenApiRequestParameters | undefined, basePath?: string | undefined);
    /**
     * Add custom headers to the request. If a header field with the given name already exists it is overwritten.
     * @param headers - Key-value pairs denoting additional custom headers.
     * @returns The request builder itself, to facilitate method chaining.
     */
    addCustomHeaders(headers: Record<string, string>): this;
    /**
     * Add custom request configuration to the request. Typically, this is used when specifying response type for downloading files.
     * If the custom request configuration contains keys in this list {@link @sap-cloud-sdk/http-client!defaultDisallowedKeys}, they will be removed.
     * @param requestConfiguration - Key-value pairs denoting additional custom request configuration options to be set in the request.
     * @returns The request builder itself, to facilitate method chaining.
     */
    addCustomRequestConfiguration(requestConfiguration: CustomRequestConfig): this;
    /**
     * Skip fetching csrf token for this request, which is typically useful when the csrf token is not required.
     * @returns The request builder itself, to facilitate method chaining.
     */
    skipCsrfTokenFetching(): this;
    /**
     * Set middleware for requests towards the target system given in the destination.
     * @param middlewares - Middlewares to be applied to the executeHttpRequest().
     * @returns The request builder itself, to facilitate method chaining.
     */
    middleware(middlewares: HttpMiddleware | HttpMiddleware[]): this;
    middleware(...middlewares: HttpMiddleware[]): this;
    /**
     * Execute request and get a raw {@link @sap-cloud-sdk/http-client!HttpResponse}, including all information about the HTTP response.
     * This especially comes in handy, when you need to access the headers or status code of the response.
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving to an {@link @sap-cloud-sdk/http-client!HttpResponse}.
     */
    executeRaw(destination: HttpDestinationOrFetchOptions): Promise<HttpResponse>;
    /**
     * Execute request and get the response data. Use this to conveniently access the data of a service without technical information about the response.
     * @param destination - Destination or DestinationFetchOptions to execute the request against.
     * @returns A promise resolving to the requested return type.
     */
    execute(destination: HttpDestinationOrFetchOptions): Promise<ResponseT>;
    /**
     * Set the custom base path that gets prefixed to the API path parameter before a request.
     * @param basePath - Base path to be set.
     * @returns The request builder itself, to facilitate method chaining.
     */
    setBasePath(basePath: string): this;
    /**
     * Get http request config.
     * @returns Promise of http request config with origin.
     */
    protected requestConfig(): Promise<HttpRequestConfigWithOrigin>;
    private getHeaders;
    private getParameters;
    private getPath;
}
/**
 * Type of the request parameters to be passed to {@link OpenApiRequestBuilder}.
 */
export interface OpenApiRequestParameters {
    /**
     * Collection of path parameters.
     */
    pathParameters?: Record<string, any>;
    /**
     * Collection of query parameters.
     */
    queryParameters?: Record<string, any>;
    /**
     * Collection of header parameters.
     */
    headerParameters?: Record<string, any>;
    /**
     * Request body typically used with "create" and "update" operations (POST, PUT, PATCH).
     */
    body?: any;
}
